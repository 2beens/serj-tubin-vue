name: Continuous Delivery [Build and Push Docker Image]

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker image tag'
        required: false
        type: string

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for better versioning

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/serj-tubin-vue
          tags: |
            type=ref,event=tag
            type=ref,event=branch
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract branch or tag name
        id: extract_ref
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ -n "${{ github.event.inputs.tag }}" ]]; then
              REF_NAME="${{ github.event.inputs.tag }}"
            else
              REF_NAME=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//-/g')
              # if master branch, then use 'latest' tag
              [[ "$REF_NAME" == "master" ]] && REF_NAME='latest'
            fi
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            REF_NAME=${GITHUB_REF#refs/tags/}
          fi
          echo "docker_image_tag=$REF_NAME" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Notify the server to redeploy via webhook
        if: success()
        run: |
          curl -v https://serj-tubin.com/webhook/st-vue/redeploy \
            -X POST \
            -H "Authorization: Bearer ${{ secrets.REDEPLOY_WEBHOOK_SECRET_TOKEN }}" \
            --retry 5 --retry-delay 2 --retry-max-time 60 \
            --fail-with-body
        env:
          CURL_TIMEOUT: 30
